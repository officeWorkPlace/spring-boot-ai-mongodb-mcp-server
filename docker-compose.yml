version: '3.8'

services:
  # Spring Boot AI MongoDB MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: spring-boot-ai-mongo-mcp-server
    ports:
      - "8080:8080"
    environment:
      # Spring Profiles
      - SPRING_PROFILES_ACTIVE=prod
      
      # MongoDB Configuration
      - MONGO_HOST=mongodb
      - MONGO_PORT=27017
      - MONGO_DATABASE=mcpdb
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/mcpdb
      
      # AI Configuration (Optional - for AI features)
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OLLAMA_BASE_URL=${OLLAMA_BASE_URL:-http://ollama:11434}
      
      # JVM Options
      - JAVA_OPTS=-XX:+UseZGC -XX:MaxRAMPercentage=75.0 -XX:+ExitOnOutOfMemoryError
      
      # Logging
      - LOGGING_LEVEL_ROOT=INFO
      - LOGGING_LEVEL_COM_OFFICEWORKPLACE=DEBUG
      
      # Security
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,info,metrics,prometheus
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=when_authorized
      
    depends_on:
      - mongodb
      - ollama
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./logs:/app/logs

  # MongoDB Database
  mongodb:
    image: mongo:7.0-jammy
    container_name: mongodb-mcp
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=mcpdb
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Ollama for Local AI (Optional)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama-mcp
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - mcp-network
    restart: unless-stopped
    environment:
      - OLLAMA_KEEP_ALIVE=24h
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-mcp
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for Visualization (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-mcp
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - mcp-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  mongodb_data:
    driver: local
  ollama_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    name: mcp-network