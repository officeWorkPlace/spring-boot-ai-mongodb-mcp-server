plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.graalvm.buildtools.native' version '0.10.4'
    id 'com.google.cloud.tools.jib' version '3.4.4'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.26'
}

group = 'com.deepai'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

ext {
    springAiVersion = "1.0.0"
    jacksonVersion = "2.18.2"
    mocksVersion = "5.14.2"
    testcontainersVersion = "1.20.4"
    springBootTestVersion = "3.4.5"
    lombokVersion = "1.18.36"
    caffeineCacheVersion = "3.1.8"
    validationApiVersion = "3.1.0"
    micrometerVersion = "1.14.2"
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    
    // Spring AI
    implementation platform("org.springframework.ai:spring-ai-bom:${springAiVersion}")
    implementation 'org.springframework.ai:spring-ai-openai-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-ollama-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-mongodb-atlas-store-spring-boot-starter'
    implementation 'org.springframework.ai:spring-ai-tika-document-reader'
    
    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    implementation 'org.mongodb:mongodb-driver-sync:5.2.1'
    implementation 'org.mongodb:bson:5.2.1'
    
    // Jackson JSON Processing
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    
    // Caching
    implementation "com.github.ben-manes.caffeine:caffeine:${caffeineCacheVersion}"
    
    // Validation
    implementation "jakarta.validation:jakarta.validation-api:${validationApiVersion}"
    implementation 'org.hibernate.validator:hibernate-validator'
    
    // Monitoring & Metrics
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
    implementation "io.micrometer:micrometer-tracing:${micrometerVersion}"
    implementation "io.micrometer:micrometer-tracing-bridge-brave:${micrometerVersion}"
    
    // Lombok
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    // Configuration Processor
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Test Dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.ai:spring-ai-spring-boot-testcontainers'
    testImplementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:mongodb'
    testImplementation "org.mockito:mockito-core:${mocksVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mocksVersion}"
    
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

tasks.named('test') {
    useJUnitPlatform()
    systemProperty 'spring.profiles.active', 'test'
    
    // JVM arguments for better test performance
    jvmArgs = [
        '-Xmx2048m',
        '-XX:+UseG1GC',
        '-XX:+UseStringDeduplication'
    ]
    
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jar {
    enabled = false
    archiveClassifier = ''
}

bootJar {
    mainClass = 'com.deepai.SpringBootAiMongoMcpServerApplication'
    archiveFileName = "${project.name}-${project.version}.jar"
    
    // Layered JAR for better Docker caching
    layered {
        enabled = true
    }
}

// JaCoCo Configuration
jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/*Application*',
                '**/*Config*'
            ])
        }))
    }
}

test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}

// Checkstyle Configuration
checkstyle {
    toolVersion = '10.20.1'
    configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
    configProperties = [
        'suppressionFile': file("${rootDir}/config/checkstyle/suppressions.xml")
    ]
}

// SpotBugs Configuration
spotbugs {
    toolVersion = '4.8.6'
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file("${rootDir}/config/spotbugs/exclude-filter.xml")
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("${buildDir}/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            required = false
        }
    }
}

// Docker/Jib Configuration
jib {
    from {
        image = 'eclipse-temurin:17-jre-alpine'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    
    to {
        image = "deepai/spring-boot-ai-mongo-mcp-server:${version}"
        tags = ['latest']
        
        auth {
            username = System.getenv('DOCKER_USERNAME') ?: ''
            password = System.getenv('DOCKER_PASSWORD') ?: ''
        }
    }
    
    container {
        mainClass = 'com.deepai.SpringBootAiMongoMcpServerApplication'
        jvmFlags = [
            '-XX:+UseG1GC',
            '-XX:+UseStringDeduplication',
            '-XX:+OptimizeStringConcat',
            '-XX:+UseCompressedOops',
            '-Djava.security.egd=file:/dev/./urandom'
        ]
        
        ports = ['8080']
        
        environment = [
            'SPRING_PROFILES_ACTIVE': 'prod',
            'JAVA_OPTS': '-Xmx1024m -Xms512m'
        ]
        
        labels = [
            'maintainer': 'DeepAI Team',
            'version': version,
            'description': 'Production-ready Spring Boot AI MongoDB MCP Server'
        ]
        
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
    
    extraDirectories {
        paths {
            path {
                from = file('src/main/jib')
                into = '/app'
            }
        }
    }
}

// GraalVM Native Configuration
graalvmNative {
    binaries {
        main {
            imageName = 'spring-boot-ai-mongo-mcp-server'
            mainClass = 'com.deepai.SpringBootAiMongoMcpServerApplication'
            
            buildArgs.addAll([
                '--no-fallback',
                '--install-exit-handlers',
                '--enable-http',
                '--enable-https',
                '--initialize-at-build-time=org.slf4j',
                '--report-unsupported-elements-at-runtime'
            ])
        }
    }
    
    toolchainDetection = false
}

// Custom Tasks
task copyDependencies(type: Copy) {
    from configurations.runtimeClasspath
    into "${buildDir}/dependencies"
}

task generateBuildInfo {
    doLast {
        def buildInfoFile = file("${buildDir}/resources/main/build-info.properties")
        buildInfoFile.parentFile.mkdirs()
        buildInfoFile.text = """
build.version=${version}
build.timestamp=${new Date().format('yyyy-MM-dd HH:mm:ss')}
build.java.version=${System.getProperty('java.version')}
build.gradle.version=${gradle.gradleVersion}
build.spring.boot.version=${project.ext.get('springBootVersion') ?: '3.4.5'}
""".trim()
    }
}

processResources.dependsOn generateBuildInfo

// Performance optimizations
tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
    options.compilerArgs << '-Xlint:unchecked'
    options.compilerArgs << '-Xlint:deprecation'
    options.encoding = 'UTF-8'
}

// Wrapper configuration
wrapper {
    gradleVersion = '8.11.1'
    distributionType = Wrapper.DistributionType.ALL
}

// Build performance
org.gradle.jvmargs=-Xmx2048m -XX:+UseParallelGC
org.gradle.parallel=true
org.gradle.caching=true